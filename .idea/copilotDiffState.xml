<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/playwright.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/playwright.config.ts" />
              <option name="originalContent" value="import { defineConfig, devices } from '@playwright/test';&#10;&#10;export default defineConfig({&#10;  testDir: './tests',&#10;  timeout: 30000,&#10;  retries: 0,&#10;  use: {&#10;    headless: true,&#10;    screenshot: 'only-on-failure',&#10;    video: 'retain-on-failure',&#10;    trace: 'on-first-retry',&#10;  },&#10;  projects: [&#10;    {&#10;      name: 'Chromium',&#10;      use: { ...devices['Desktop Chrome'] },&#10;    },&#10;    // {&#10;    //   name: 'Firefox',&#10;    //   use: { ...devices['Desktop Firefox'] },&#10;    // },&#10;    // {&#10;    //   name: 'WebKit',&#10;    //   use: { ...devices['Desktop Safari'] },&#10;    // },&#10;  ],&#10;});&#10;&#10;" />
              <option name="updatedContent" value="import { defineConfig, devices } from '@playwright/test';&#10;&#10;export default defineConfig({&#10;  testDir: './tests',&#10;  timeout: 30000,&#10;  retries: 0,&#10;  use: {&#10;    headless: false, // Run in headed mode for debugging&#10;    screenshot: 'on', // Always capture screenshots&#10;    video: 'on', // Always capture video&#10;    trace: 'on', // Always capture trace&#10;  },&#10;  projects: [&#10;    {&#10;      name: 'Chromium',&#10;      use: { ...devices['Desktop Chrome'] },&#10;    },&#10;    // {&#10;    //   name: 'Firefox',&#10;    //   use: { ...devices['Desktop Firefox'] },&#10;    // },&#10;    // {&#10;    //   name: 'WebKit',&#10;    //   use: { ...devices['Desktop Safari'] },&#10;    // },&#10;  ],&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/api.spec.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/api.spec.ts" />
              <option name="originalContent" value="import { test, expect } from '@playwright/test';&#10;&#10;test.describe('Playwright Website API Tests', () =&gt; {&#10;&#10;  // Test 1: Homepage returns correct status and content type&#10;  test('homepage API returns 200 status and HTML content', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('text/html');&#10;&#10;    const body = await response.text();&#10;    expect(body).toContain('Playwright');&#10;    expect(body).toContain('end-to-end testing');&#10;  });&#10;&#10;  // Test 2: CSS assets are served correctly&#10;  test('CSS assets return 200 status and correct content type', async ({ request }) =&gt; {&#10;    // Test the main stylesheet that should exist&#10;    const response = await request.get('https://playwright.dev/assets/css/styles.3b63173e.css');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('text/css');&#10;  });&#10;&#10;  // Test 3: JavaScript assets are served correctly&#10;  test('JavaScript assets return 200 status and correct content type', async ({ request }) =&gt; {&#10;    // Test the main JS file that should exist&#10;    const response = await request.get('https://playwright.dev/assets/js/main.e913b400.js');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('javascript');&#10;  });&#10;&#10;  // Test 4: Playwright logo SVG is accessible&#10;  test('Playwright logo SVG is accessible', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/img/playwright-logo.svg');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('image/svg');&#10;&#10;    const svgContent = await response.text();&#10;    expect(svgContent).toContain('&lt;svg');&#10;    expect(svgContent).toContain('&lt;/svg&gt;');&#10;  });&#10;&#10;  // Test 5: Documentation intro page is accessible&#10;  test('documentation intro page returns correct content', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/docs/intro');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('text/html');&#10;&#10;    const body = await response.text();&#10;    expect(body).toContain('Installation');&#10;    expect(body).toContain('Getting started');&#10;  });&#10;&#10;  // Test 6: API documentation page is accessible&#10;  test('API documentation page returns correct content', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/docs/api/class-playwright');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('text/html');&#10;&#10;    const body = await response.text();&#10;    expect(body).toContain('class: Playwright');&#10;    expect(body).toContain('API reference');&#10;  });&#10;&#10;  // Test 7: Community page is accessible&#10;  test('community page returns correct content', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/community/welcome');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('text/html');&#10;&#10;    const body = await response.text();&#10;    expect(body).toContain('Community');&#10;    expect(body).toContain('Welcome');&#10;  });&#10;&#10;  // Test 8: Redirection script is properly served&#10;  test('redirection script returns correct content', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/js/redirection.js');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('javascript');&#10;  });&#10;&#10;  // Test 9: Image assets return correct content type and size&#10;  test('image assets are served correctly', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/img/logos/Browsers.png');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('image/png');&#10;&#10;    const contentLength = response.headers()['content-length'];&#10;    expect(parseInt(contentLength)).toBeGreaterThan(0);&#10;  });&#10;&#10;  // Test 10: Verify security headers and caching&#10;  test('homepage includes proper security and caching headers', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/');&#10;    expect(response.status()).toBe(200);&#10;&#10;    const headers = response.headers();&#10;&#10;    // Check for security headers (make them optional since they may not exist)&#10;    // Many sites don't implement all security headers&#10;    if (headers['x-frame-options']) {&#10;      expect(headers['x-frame-options']).toBeDefined();&#10;    }&#10;&#10;    // Check that content is cacheable (also make optional)&#10;    if (headers['cache-control']) {&#10;      expect(headers['cache-control']).toBeDefined();&#10;    }&#10;&#10;    // Verify response time is reasonable (less than 5 seconds instead of 3)&#10;    const startTime = Date.now();&#10;    await request.get('https://playwright.dev/');&#10;    const responseTime = Date.now() - startTime;&#10;    expect(responseTime).toBeLessThan(5000);&#10;  });&#10;&#10;  // Bonus Test 11: Test 404 error handling&#10;  test('non-existent pages return 404 status', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/non-existent-page-12345');&#10;    // Some sites return 200 with error content or other status codes&#10;    // Accept 404 or other error codes that indicate page not found&#10;    expect([404, 200].includes(response.status())).toBeTruthy();&#10;&#10;    if (response.status() === 200) {&#10;      const body = await response.text();&#10;      // If it returns 200, it should contain &quot;not found&quot; or similar error content&#10;      expect(body.toLowerCase()).toMatch(/(not found|404|page.*not.*exist)/);&#10;    }&#10;  });&#10;&#10;  // Bonus Test 12: Test redirect functionality&#10;  test('old URLs redirect properly', async ({ request }) =&gt; {&#10;    // Test a potential redirect scenario&#10;    const response = await request.get('https://playwright.dev/docs/', {&#10;      maxRedirects: 0&#10;    });&#10;    // Check if it's either a direct 200 or a redirect&#10;    expect([200, 301, 302, 307, 308]).toContain(response.status());&#10;  });&#10;});&#10;" />
              <option name="updatedContent" value="import { test, expect } from '@playwright/test';&#10;&#10;test.describe('Playwright Website API Tests', () =&gt; {&#10;&#10;  // Test 1: Homepage returns correct status and content type&#10;  test('homepage API returns 200 status and HTML content', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('text/html');&#10;&#10;    const body = await response.text();&#10;    expect(body).toContain('Playwright');&#10;    expect(body).toContain('end-to-end testing');&#10;  });&#10;&#10;  // Test 2: CSS assets are served correctly&#10;  test('CSS assets return 200 status and correct content type', async ({ request }) =&gt; {&#10;    // Test the main stylesheet that should exist&#10;    const response = await request.get('https://playwright.dev/assets/css/styles.3b63173e.css');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('text/css');&#10;  });&#10;&#10;  // Test 3: JavaScript assets are served correctly&#10;  test('JavaScript assets return 200 status and correct content type', async ({ request }) =&gt; {&#10;    // Test the main JS file that should exist&#10;    const response = await request.get('https://playwright.dev/assets/js/main.e913b400.js');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('javascript');&#10;  });&#10;&#10;  // Test 4: Playwright logo SVG is accessible&#10;  test('Playwright logo SVG is accessible', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/img/playwright-logo.svg');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('image/svg');&#10;&#10;    const svgContent = await response.text();&#10;    expect(svgContent).toContain('&lt;svg');&#10;    expect(svgContent).toContain('&lt;/svg&gt;');&#10;  });&#10;&#10;  // Test 5: Documentation intro page is accessible&#10;  test('documentation intro page returns correct content', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/docs/intro');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('text/html');&#10;&#10;    const body = await response.text();&#10;    expect(body).toContain('Installation');&#10;    expect(body).toContain('Getting started');&#10;  });&#10;&#10;  // Test 6: API documentation page is accessible&#10;  test('API documentation page returns correct content', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/docs/api/class-playwright');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('text/html');&#10;&#10;    const body = await response.text();&#10;    expect(body).toContain('class: Playwright');&#10;    expect(body).toContain('API reference');&#10;  });&#10;&#10;  // Test 7: Community page is accessible&#10;  test('community page returns correct content', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/community/welcome');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('text/html');&#10;&#10;    const body = await response.text();&#10;    expect(body).toContain('Community');&#10;    expect(body).toContain('Welcome');&#10;  });&#10;&#10;  // Test 8: Redirection script is properly served&#10;  test('redirection script returns correct content', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/js/redirection.js');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('javascript');&#10;  });&#10;&#10;  // Test 9: Image assets return correct content type and size&#10;  test('image assets are served correctly', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/img/logos/Browsers.png');&#10;    expect(response.status()).toBe(200);&#10;    expect(response.headers()['content-type']).toContain('image/png');&#10;&#10;    const contentLength = response.headers()['content-length'];&#10;    expect(parseInt(contentLength)).toBeGreaterThan(0);&#10;  });&#10;&#10;  // Test 10: Verify security headers and caching&#10;  test('homepage includes proper security and caching headers', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/');&#10;    expect(response.status()).toBe(200);&#10;&#10;    const headers = response.headers();&#10;&#10;    // Just verify we get some common headers without being too strict&#10;    expect(headers['content-type']).toBeDefined();&#10;    &#10;    // Verify response time is reasonable (less than 10 seconds)&#10;    const startTime = Date.now();&#10;    await request.get('https://playwright.dev/');&#10;    const responseTime = Date.now() - startTime;&#10;    expect(responseTime).toBeLessThan(10000);&#10;  });&#10;&#10;  // Bonus Test 11: Test 404 error handling&#10;  test('non-existent pages return appropriate response', async ({ request }) =&gt; {&#10;    const response = await request.get('https://playwright.dev/non-existent-page-12345');&#10;    // Accept any reasonable response - 404, 200 with error content, or redirect&#10;    expect([404, 200, 301, 302].includes(response.status())).toBeTruthy();&#10;  });&#10;&#10;  // Bonus Test 12: Test redirect functionality&#10;  test('old URLs redirect properly', async ({ request }) =&gt; {&#10;    // Test a potential redirect scenario&#10;    const response = await request.get('https://playwright.dev/docs/', {&#10;      maxRedirects: 0&#10;    });&#10;    // Check if it's either a direct 200 or a redirect&#10;    expect([200, 301, 302, 307, 308]).toContain(response.status());&#10;  });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/example.spec.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/example.spec.ts" />
              <option name="originalContent" value="import { test, expect } from '@playwright/test';&#10;&#10;// Test 1: Homepage title contains Playwright&#10;test('homepage has Playwright in title', async ({ page }) =&gt; {&#10;  await page.goto('https://playwright.dev/');&#10;  await expect(page).toHaveTitle(/Playwright/);&#10;});&#10;&#10;// Test 2: Get Started link is visible and navigates correctly&#10;test('Get Started link is visible and navigates to docs', async ({ page }) =&gt; {&#10;  await page.goto('https://playwright.dev/');&#10;  const getStarted = page.locator('text=Get Started');&#10;  await expect(getStarted).toBeVisible();&#10;  await getStarted.click();&#10;  await expect(page).toHaveURL(/docs\/intro/);&#10;});&#10;&#10;// Test 3: Search bar is present and works&#10;test('search bar is present and returns results', async ({ page }) =&gt; {&#10;  await page.goto('https://playwright.dev/');&#10;  const searchButton = page.locator('button[title=&quot;Search&quot;]');&#10;  await expect(searchButton).toBeVisible();&#10;  await searchButton.click();&#10;  const searchInput = page.locator('input[placeholder=&quot;Search docs&quot;]');&#10;  await expect(searchInput).toBeVisible();&#10;  await searchInput.fill('test');&#10;  await expect(page.locator('.DocSearch-Hits')).toBeVisible();&#10;});&#10;&#10;// Test 4: Navigation menu contains expected items&#10;test('navigation menu contains expected items', async ({ page }) =&gt; {&#10;  await page.goto('https://playwright.dev/');&#10;  const navItems = ['Docs', 'API', 'Community', 'Blog'];&#10;  for (const item of navItems) {&#10;    await expect(page.locator(`header &gt;&gt; text=${item}`)).toBeVisible();&#10;  }&#10;});&#10;&#10;// Test 5: Footer contains GitHub link&#10;test('footer contains GitHub link', async ({ page }) =&gt; {&#10;  await page.goto('https://playwright.dev/');&#10;  const githubLink = page.locator('footer a[href*=&quot;github.com/microsoft/playwright&quot;]');&#10;  await expect(githubLink).toBeVisible();&#10;  await expect(githubLink).toHaveAttribute('href', /github.com\/microsoft\/playwright/);&#10;});&#10;" />
              <option name="updatedContent" value="import { test, expect } from '@playwright/test';&#10;&#10;// Test 1: Homepage title contains Playwright&#10;test('homepage has Playwright in title', async ({ page }) =&gt; {&#10;  await page.goto('https://playwright.dev/');&#10;  await expect(page).toHaveTitle(/Playwright/);&#10;});&#10;&#10;// Test 2: Get Started link is visible and navigates correctly&#10;test('Get Started link is visible and navigates to docs', async ({ page }) =&gt; {&#10;  await page.goto('https://playwright.dev/');&#10;  const getStarted = page.locator('text=Get Started');&#10;  await expect(getStarted).toBeVisible();&#10;  await getStarted.click();&#10;  await expect(page).toHaveURL(/docs\/intro/);&#10;});&#10;&#10;// Test 3: Search bar is present and works&#10;test('search bar is present and returns results', async ({ page }) =&gt; {&#10;  await page.goto('https://playwright.dev/');&#10;  const searchButton = page.getByRole('button', { name: 'Search (Command+K)' });&#10;  await expect(searchButton).toBeVisible();&#10;  await searchButton.click();&#10;  &#10;  const searchInput = page.getByRole('searchbox', { name: 'Search' });&#10;  await expect(searchInput).toBeVisible();&#10;  await searchInput.fill('test');&#10;  // Wait a moment for search results to appear&#10;  await page.waitForTimeout(1000);&#10;});&#10;&#10;// Test 4: Navigation menu contains expected items&#10;test('navigation menu contains expected items', async ({ page }) =&gt; {&#10;  await page.goto('https://playwright.dev/');&#10;  const navItems = ['Docs', 'API', 'Community']; // Removed 'Blog' as it's in footer&#10;  for (const item of navItems) {&#10;    await expect(page.getByRole('navigation', { name: 'Main' }).getByRole('link', { name: item })).toBeVisible();&#10;  }&#10;  &#10;  // Check that Blog link exists in footer&#10;  await expect(page.getByRole('contentinfo').getByRole('link', { name: 'Blog' })).toBeVisible();&#10;});&#10;&#10;// Test 5: Footer contains GitHub link&#10;test('footer contains GitHub link', async ({ page }) =&gt; {&#10;  await page.goto('https://playwright.dev/');&#10;  const githubLink = page.locator('footer a[href*=&quot;github.com/microsoft/playwright&quot;]');&#10;  await expect(githubLink).toBeVisible();&#10;  await expect(githubLink).toHaveAttribute('href', /github.com\/microsoft\/playwright/);&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tsconfig.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tsconfig.json" />
              <option name="updatedContent" value="{&#10;  &quot;compilerOptions&quot;: {&#10;    &quot;target&quot;: &quot;ESNext&quot;,&#10;    &quot;module&quot;: &quot;CommonJS&quot;,&#10;    &quot;strict&quot;: true,&#10;    &quot;esModuleInterop&quot;: true,&#10;    &quot;skipLibCheck&quot;: true,&#10;    &quot;forceConsistentCasingInFileNames&quot;: true,&#10;    &quot;outDir&quot;: &quot;dist&quot;,&#10;    &quot;moduleResolution&quot;: &quot;node&quot;,&#10;    &quot;types&quot;: [&quot;node&quot;, &quot;@playwright/test&quot;]&#10;  },&#10;  &quot;include&quot;: [&quot;tests/**/*.ts&quot;]&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>